#!/bin/bash

# Configuration
API_URL="https://127.0.0.1:8002"
EMAIL="test@example.com"
PASSWORD="test123"

# Couleurs pour les messages
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

echo "üß™ Test des endpoints d'avis sur les produits"
echo "----------------------------------------"

# √âtape 1 : Authentification
echo -e "\n1Ô∏è‚É£ Authentification"
TOKEN=$(curl -s -k -X POST -H "Content-Type: application/json" \
    -d "{\"username\":\"$EMAIL\",\"password\":\"$PASSWORD\"}" \
    "$API_URL/api/login_check" | jq -r '.token')

if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
    echo -e "${RED}‚ùå √âchec de l'authentification${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Authentification r√©ussie${NC}"

# √âtape 2 : Cr√©ation d'un produit pour les tests
echo -e "\n2Ô∏è‚É£ Cr√©ation d'un produit pour les tests"
PRODUCT_RESPONSE=$(curl -s -k -X POST -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d '{"title":"Produit Test","price":99.99}' \
    "$API_URL/api/products")

if [ -z "$PRODUCT_RESPONSE" ]; then
    echo -e "${RED}‚ùå √âchec de la cr√©ation du produit (r√©ponse vide)${NC}"
    exit 1
fi

PRODUCT_ID=$(echo $PRODUCT_RESPONSE | jq -r '.id')
if [ -z "$PRODUCT_ID" ] || [ "$PRODUCT_ID" = "null" ]; then
    echo -e "${RED}‚ùå √âchec de la cr√©ation du produit${NC}"
    echo "R√©ponse : $PRODUCT_RESPONSE"
    exit 1
fi
echo -e "${GREEN}‚úÖ Produit cr√©√© avec l'ID: $PRODUCT_ID${NC}"

# Test 1 : Cr√©ation d'un avis
echo -e "\n3Ô∏è‚É£ Test 1 : Cr√©ation d'un avis"
REVIEW_RESPONSE=$(curl -s -k -X POST -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d '{"rating":5,"message":"Excellent produit !"}' \
    "$API_URL/api/products/$PRODUCT_ID/reviews")

REVIEW_ID=$(echo $REVIEW_RESPONSE | jq -r '.id')
if [ -z "$REVIEW_ID" ] || [ "$REVIEW_ID" = "null" ]; then
    echo -e "${RED}‚ùå √âchec de la cr√©ation de l'avis${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Avis cr√©√© avec l'ID: $REVIEW_ID${NC}"

# Test 2 : R√©cup√©ration de la liste des avis
echo -e "\n4Ô∏è‚É£ Test 2 : R√©cup√©ration de la liste des avis"
LIST_RESPONSE=$(curl -s -k -H "Authorization: Bearer $TOKEN" \
    "$API_URL/api/products/$PRODUCT_ID/reviews")

if [[ $LIST_RESPONSE == *"$REVIEW_ID"* ]]; then
    echo -e "${GREEN}‚úÖ Liste des avis r√©cup√©r√©e avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå √âchec de la r√©cup√©ration de la liste des avis${NC}"
    exit 1
fi

# Test 3 : Mise √† jour d'un avis
echo -e "\n5Ô∏è‚É£ Test 3 : Mise √† jour d'un avis"
UPDATE_RESPONSE=$(curl -s -k -X PUT -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d '{"rating":4,"message":"Tr√®s bon produit, mais pourrait √™tre am√©lior√©"}' \
    "$API_URL/api/products/$PRODUCT_ID/reviews/$REVIEW_ID")

if [[ $UPDATE_RESPONSE == *"$REVIEW_ID"* ]]; then
    echo -e "${GREEN}‚úÖ Avis mis √† jour avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå √âchec de la mise √† jour de l'avis${NC}"
    exit 1
fi

# Test 4 : Tentative de mise √† jour d'un avis inexistant
echo -e "\n6Ô∏è‚É£ Test 4 : Tentative de mise √† jour d'un avis inexistant"
INVALID_UPDATE_RESPONSE=$(curl -s -k -X PUT -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d '{"rating":5,"message":"Test"}' \
    "$API_URL/api/products/$PRODUCT_ID/reviews/99999")

echo "R√©ponse brute : $INVALID_UPDATE_RESPONSE"

if [[ $INVALID_UPDATE_RESPONSE == *"Avis non trouv"* ]]; then
    echo -e "${GREEN}‚úÖ Comportement attendu pour un avis inexistant${NC}"
else
    echo -e "${RED}‚ùå Comportement inattendu pour un avis inexistant${NC}"
    exit 1
fi

# Test 5 : Suppression d'un avis
echo -e "\n7Ô∏è‚É£ Test 5 : Suppression d'un avis"
DELETE_RESPONSE=$(curl -s -k -X DELETE -H "Authorization: Bearer $TOKEN" \
    "$API_URL/api/products/$PRODUCT_ID/reviews/$REVIEW_ID")

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Avis supprim√© avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå √âchec de la suppression de l'avis${NC}"
    exit 1
fi

# Test 6 : V√©rification de la suppression
echo -e "\n8Ô∏è‚É£ Test 6 : V√©rification de la suppression"
GET_DELETED_RESPONSE=$(curl -s -w "\n%{http_code}" -k -H "Authorization: Bearer $TOKEN" \
    "$API_URL/api/products/$PRODUCT_ID/reviews/$REVIEW_ID")

HTTP_CODE=$(echo "$GET_DELETED_RESPONSE" | tail -n1)
RESPONSE_BODY=$(echo "$GET_DELETED_RESPONSE" | sed '$d')

echo "R√©ponse brute : $RESPONSE_BODY"
echo "Code HTTP : $HTTP_CODE"

if [ "$HTTP_CODE" = "405" ]; then
    echo -e "${GREEN}‚úÖ Comportement attendu pour un avis supprim√© (M√©thode non autoris√©e)${NC}"
else
    echo -e "${RED}‚ùå Comportement inattendu pour un avis supprim√©${NC}"
    exit 1
fi

echo -e "\n${GREEN}‚úÖ Tous les tests ont r√©ussi !${NC}" 